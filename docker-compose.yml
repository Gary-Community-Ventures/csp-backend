services:
  backend:
    build: .
    # For development, use run.py for Flask's built-in server with hot reloading
    command: python run.py
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - FLASK_ENV=development
      - DEBUG=True
      # Pass Sentry DSN from host .env
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
      - SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
      - APP_VERSION=${APP_VERSION}
      # Pass Clerk variables from host .env
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    restart: on-failure
    volumes:
      - .:/app # Bind mount for hot reloading

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT_HOST}:5432"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PG_HOST=postgres
      - PG_PORT=${POSTGRES_PORT}
      - PG_DB=${POSTGRES_DB}
      - PG_USER=${POSTGRES_USER}
      - PG_PASSWORD=${POSTGRES_PASSWORD}
      - PGADMIN_SETUP_PASSFILE=/pgadmin4/pgpass
    # Run as root to have permission to create files and change ownership
    user: root
    ports:
      - "5051:80"
    volumes:
      - ./pgadmin-entrypoint.sh:/pgadmin-entrypoint.sh
      - pgadmin_data:/var/lib/pgadmin
    # Use entrypoint to override the image's default entrypoint
    entrypoint: sh -c "chmod +x /pgadmin-entrypoint.sh && /pgadmin-entrypoint.sh"
    depends_on:
      - postgres
    restart: on-failure

volumes:
  postgres_data:
  pgadmin_data:
