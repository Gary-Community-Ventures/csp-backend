[1mdiff --git a/app/__init__.py b/app/__init__.py[m
[1mindex 1fc4be5..13739d5 100644[m
[1m--- a/app/__init__.py[m
[1m+++ b/app/__init__.py[m
[36m@@ -9,6 +9,7 @@[m [mfrom google.oauth2 import service_account[m
 from googleapiclient.discovery import build[m
 from sentry_sdk.integrations.flask import FlaskIntegration[m
 from sentry_sdk.integrations.sqlalchemy import SqlalchemyIntegration[m
[32m+[m[32mfrom supabase import create_client, Client[m
 [m
 from app.sheets.integration import SheetsManager[m
 [m
[36m@@ -80,6 +81,16 @@[m [mdef create_app(config_class=None):[m
         app.clerk_client = Clerk(bearer_auth=clerk_secret_key)[m
         print("Clerk SDK initialized successfully.")[m
 [m
[32m+[m[32m    # --- Supabase Client Initialization ---[m
[32m+[m[32m    supabase_url = app.config.get("SUPABASE_URL")[m
[32m+[m[32m    supabase_key = app.config.get("SUPABASE_KEY")[m
[32m+[m
[32m+[m[32m    if not supabase_url or not supabase_key:[m
[32m+[m[32m        print("WARNING: SUPABASE_URL or SUPABASE_KEY not found. Supabase client will not be initialized.")[m
[32m+[m[32m        app.supabase_client = None[m
[32m+[m[32m    else:[m
[32m+[m[32m        app.supabase_client = create_client(supabase_url, supabase_key)[m
[32m+[m
     app.config["API_KEY"] = os.environ.get("API_KEY")[m
     if not app.config["API_KEY"]:[m
         raise ValueError("API_KEY environment variable must be set")[m
[1mdiff --git a/app/config.py b/app/config.py[m
[1mindex fd58c07..6392926 100644[m
[1m--- a/app/config.py[m
[1m+++ b/app/config.py[m
[36m@@ -36,6 +36,10 @@[m [mclass Config:[m
     # Clerk Configuration[m
     CLERK_SECRET_KEY = os.getenv("CLERK_SECRET_KEY")[m
 [m
[32m+[m[32m    # Supabase Configuration[m
[32m+[m[32m    SUPABASE_URL = os.getenv("SUPABASE_URL")[m
[32m+[m[32m    SUPABASE_KEY = os.getenv("SUPABASE_KEY")[m
[32m+[m
     # For Flask-Admin[m
     SECRET_KEY = os.getenv("SECRET_KEY")[m
 [m
[1mdiff --git a/app/routes/family.py b/app/routes/family.py[m
[1mindex 215b906..48c33fa 100644[m
[1m--- a/app/routes/family.py[m
[1m+++ b/app/routes/family.py[m
[36m@@ -38,6 +38,8 @@[m [mfrom app.sheets.mappings import ([m
     get_providers,[m
     get_transactions,[m
 )[m
[32m+[m[32mfrom app.supabase.helpers import cols[m
[32m+[m[32mfrom app.supabase.tables import Child, Family, Guardian[m
 from app.utils.email_service import ([m
     get_from_email_internal,[m
     html_link,[m
[36m@@ -103,6 +105,31 @@[m [mdef default_child_id():[m
 @bp.get("/family/<child_id>")[m
 @auth_required(ClerkUserType.FAMILY)[m
 def family_data(child_id: Optional[str] = None):[m
[32m+[m[32m    data = ([m
[32m+[m[32m        Child.query()[m
[32m+[m[32m        .select([m
[32m+[m[32m            cols([m
[32m+[m[32m                Child.FIRST_NAME,[m
[32m+[m[32m                Child.LAST_NAME,[m
[32m+[m[32m                Child.CREATED_AT,[m
[32m+[m[32m                Child.FAMILY_ID,[m
[32m+[m[32m                Family.join([m
[32m+[m[32m                    Family.APPROVED, Guardian.join(Guardian.FIRST_NAME, Guardian.LAST_NAME, Guardian.CREATED_AT)[m
[32m+[m[32m                ),[m
[32m+[m[32m            )[m
[32m+[m[32m        )[m
[32m+[m[32m        .single()[m
[32m+[m[32m        .execute()[m
[32m+[m[32m        .data[m
[32m+[m[32m    )  # FIXME:[m
[32m+[m[32m    print(Child.CREATED_AT(data))  # FIXME:[m
[32m+[m[32m    family = Family.unwrap(data)[m
[32m+[m[32m    print(Family.APPROVED(family))[m
[32m+[m[32m    guardians = Guardian.unwrap(family)[m
[32m+[m[32m    print(Guardian.FIRST_NAME(guardians[0]))[m
[32m+[m[32m    print(Guardian.LAST_NAME(guardians[0]))[m
[32m+[m[32m    print(Guardian.CREATED_AT(guardians[0]))[m
[32m+[m
     user = get_family_user()[m
 [m
     child_rows = get_children()[m
[1mdiff --git a/app/supabase/helpers.py b/app/supabase/helpers.py[m
[1mnew file mode 100644[m
[1mindex 0000000..2909e16[m
[1m--- /dev/null[m
[1m+++ b/app/supabase/helpers.py[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32mfrom datetime import datetime[m
[32m+[m[32mfrom typing import TYPE_CHECKING, Union[m
[32m+[m
[32m+[m[32mif TYPE_CHECKING:[m
[32m+[m[32m    from app.supabase.tables import Column[m
[32m+[m
[32m+[m
[32m+[m[32mdef cols(*args: "Column"):[m
[32m+[m[32m    if len(args) == 0:[m
[32m+[m[32m        return "*"[m
[32m+[m
[32m+[m[32m    return ", ".join([str(a) for a in args])[m
[32m+[m
[32m+[m
[32m+[m[32mdef by_id(query, id: str):[m
[32m+[m[32m    return query.filter(id=id)[m
[32m+[m
[32m+[m
[32m+[m[32mdef datetime_column(value):[m
[32m+[m[32m    return datetime.fromisoformat(value)[m
[32m+[m
[32m+[m
[32m+[m[32mdef date_column(value):[m
[32m+[m[32m    return datetime.strptime(value, "%Y-%m-%d").date()[m
[32m+[m
[1mdiff --git a/app/supabase/queries.py b/app/supabase/queries.py[m
[1mdeleted file mode 100644[m
[1mindex e69de29..0000000[m
[1mdiff --git a/app/supabase/tables.py b/app/supabase/tables.py[m
[1mindex 99fb690..5220ffb 100644[m
[1m--- a/app/supabase/tables.py[m
[1m+++ b/app/supabase/tables.py[m
[36m@@ -1,41 +1,117 @@[m
[31m-from supabase.client import Client, create_client[m
[32m+[m[32mfrom flask import current_app[m
[32m+[m[32mfrom postgrest import SyncRequestBuilder, SyncSelectRequestBuilder[m
[32m+[m[32mfrom app.supabase.helpers import cols, date_column, datetime_column[m
[32m+[m[32mfrom typing import Any, Callable, Generic, TypeVar[m
 [m
[31m-s: Client = create_client("todo", "todo")[m
[32m+[m[32mT = TypeVar("T")[m
 [m
 [m
[31m-def columns(*args: str):[m
[31m-    if len(args) == 0:[m
[31m-        return "*"[m
[32m+[m[32mclass Column(Generic[T]):[m
[32m+[m[32m    def __init__(self, name: str, converter: Callable[[Any], T] = str):[m
[32m+[m[32m        self.name = name[m
[32m+[m[32m        self._converter = converter[m
 [m
[31m-    return ", ".join(args)[m
[32m+[m[32m    def __str__(self):[m
[32m+[m[32m        return self.name[m
[32m+[m
[32m+[m[32m    def __repr__(self):[m
[32m+[m[32m        return f"Column({self.name}<{self._converter.__name__}>)"[m
[32m+[m
[32m+[m[32m    def __call__(self, data: dict) -> T:[m
[32m+[m[32m        """[m
[32m+[m[32m        Convert the value to the correct data type.[m
[32m+[m[32m        """[m
[32m+[m[32m        value = data[self.name][m
[32m+[m
[32m+[m[32m        if value is None:[m
[32m+[m[32m            return None[m
[32m+[m[32m        return self._converter(value)[m
[32m+[m
[32m+[m[32m    def __hash__(self) -> int:[m
[32m+[m[32m        return hash(self.name)[m
[32m+[m
[32m+[m[32m    def __eq__(self, other):[m
[32m+[m[32m        if isinstance(other, str):  # Allow it to be used as a key in a dict[m
[32m+[m[32m            return self.name == other[m
[32m+[m[32m        if isinstance(other, Column):[m
[32m+[m[32m            return self.name == other.name[m
[32m+[m
[32m+[m[32m        return False[m
 [m
 [m
 class Table:[m
     TABLE_NAME: str = ""[m
[31m-    ID: str = "id"[m
[32m+[m[32m    ID: str = Column("id", int)[m
 [m
     @classmethod[m
[31m-    def query(cls):[m
[31m-        return s.table(cls.TABLE_NAME)[m
[32m+[m[32m    def query(cls) -> SyncRequestBuilder:[m
[32m+[m[32m        return current_app.supabase_client.table(cls.TABLE_NAME)[m
 [m
     @classmethod[m
     def join(cls, *columns: str):[m
[31m-        return [f"{cls.TABLE_NAME}({c})" for c in columns][m
[32m+[m[32m        return f"{cls.TABLE_NAME}({cols(*columns)})"[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def select_by_id(cls, columns: str, id: str) -> SyncSelectRequestBuilder:[m
[32m+[m[32m        return cls.query().select(columns).eq(cls.ID, id).single()[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def unwrap(cls, data: dict):[m
[32m+[m[32m        return data.get(cls.TABLE_NAME)[m
 [m
 [m
 class Family(Table):[m
     TABLE_NAME = "family"[m
 [m
[31m-    FIRST_NAME = "first_name"[m
[31m-    LAST_NAME = "last_name"[m
[32m+[m[32m    CREATED_AT = Column("created_at", datetime_column)[m
[32m+[m[32m    REFERRED_BY = Column("referred_by")[m
[32m+[m[32m    SIZE = Column("size", int)[m
[32m+[m[32m    YEARLY_INCOME = Column("yearly_income", float)[m
[32m+[m[32m    ZIP = Column("zip")[m
[32m+[m[32m    APPROVED = Column("approved", datetime_column)[m
[32m+[m
[32m+[m
[32m+[m[32mclass Guardian(Table):[m
[32m+[m[32m    TABLE_NAME = "guardian"[m
[32m+[m
[32m+[m[32m    CREATED_AT = Column("created_at", datetime_column)[m
[32m+[m[32m    TYPE = Column("type")[m
[32m+[m[32m    FIRST_NAME = Column("first_name")[m
[32m+[m[32m    LAST_NAME = Column("last_name")[m
[32m+[m[32m    EMAIL = Column("email")[m
[32m+[m[32m    PHONE_NUMBER = Column("phone_number")[m
[32m+[m[32m    ADDRESS_1 = Column("address_1")[m
[32m+[m[32m    ADDRESS_2 = Column("address_2")[m
[32m+[m[32m    CITY = Column("city")[m
[32m+[m[32m    STATE = Column("state")[m
[32m+[m[32m    ZIP = Column("zip")[m
[32m+[m
[32m+[m[32m    # Foreign keys[m
[32m+[m[32m    FAMILY_ID = Column("family", int)[m
 [m
 [m
 class Child(Table):[m
     TABLE_NAME = "child"[m
 [m
[31m-    FIRST_NAME = "first_name"[m
[31m-    LAST_NAME = "last_name"[m
[31m-    FAMILY_ID = "family_id"[m
[32m+[m[32m    CREATED_AT = Column("created_at", datetime_column)[m
[32m+[m[32m    FIRST_NAME = Column("first_name")[m
[32m+[m[32m    MIDDLE_NAME = Column("middle_name")[m
[32m+[m[32m    LAST_NAME = Column("last_name")[m
[32m+[m[32m    DATE_OF_BIRTH = Column("dob", date_column)[m
[32m+[m
[32m+[m[32m    # Foreign keys[m
[32m+[m[32m    FAMILY_ID = Column("family_id")[m
[32m+[m
 [m
[32m+[m[32mclass Provider(Table):[m
[32m+[m[32m    TABLE_NAME = "provider"[m
 [m
[31m-data = Child.query().select(columns(Child.FIRST_NAME, Child.LAST_NAME, *Family.join(Family.FIRST_NAME, Family.LAST_NAME))).exec[m
[32m+[m[32m    CREATED_AT = Column("created_at", datetime_column)[m
[32m+[m[32m    TYPE = Column("type")[m
[32m+[m[32m    NAME = Column("name")[m
[32m+[m[32m    ADDRESS_1 = Column("address_1")[m
[32m+[m[32m    ADDRESS_2 = Column("address_2")[m
[32m+[m[32m    CITY = Column("city")[m
[32m+[m[32m    STATE = Column("state")[m
[32m+[m[32m    ZIP = Column("zip")[m
[32m+[m[32m    APPROVED = Column("approved", datetime_column)[m
[1mdiff --git a/requirements.txt b/requirements.txt[m
[1mindex 8b54519..b7b835a 100644[m
[1m--- a/requirements.txt[m
[1m+++ b/requirements.txt[m
[36m@@ -10,6 +10,7 @@[m [mFlask-WTF==1.2.1[m
 Flask-SQLAlchemy==3.1.1[m
 Flask-Migrate==4.1.0[m
 psycopg2-binary==2.9.10[m
[32m+[m[32msupabase==2.18.1[m
 [m
 # Authentication[m
 clerk-backend-api==3.0.5[m
